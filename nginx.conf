
#user  nobody;
worker_processes  2;

error_log  /Users/xiaoyueya/work/logs/openresty/error.log;
#error_log /Users/xiaoyueya/work/logs/openresty/error.log  notice;
#error_log /Users/xiaoyueya/work/logs/openresty/error.log  info;

pid     /Users/xiaoyueya/work/logs/openresty/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /Users/xiaoyueya/work/logs/openresty/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #指定缓存信息
    lua_shared_dict ngx_cache 128m;
    #保证只有一个线程去访问redis或是mysql-lock for cache
    lua_shared_dict cache_lock 100k;
    #lua扩展加载
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";


    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        access_log  /Users/xiaoyueya/work/logs/openresty/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location = /lua {
            set $test "this is lua";
            content_by_lua '
                        ngx.header.content_type = "text/plain";
                        ngx.say(ngx.var.test);
            ';
        }

        location =/luafile{
            content_by_lua_file return_user.lua;
        }

        location ~ /image/ {
            root ./;
            autoindex on;
        }

        location =/redis/index{
            content_by_lua_file return_redis.lua;
        }

        location =/mysql/index{
            #default_type 'text/html';
            charset utf-8;
            content_by_lua_file return_mysql.lua;
        }

        location =/capture/index{
            charset utf-8;
            default_type 'text/html';
            content_by_lua_file return_capture.lua;
        }

        #返回当前master下worker的共享内存信息
        location =/cache/index{
            charset utf-8;
            content_by_lua_file return_cache.lua;
        }

        location =/cache/lock{
             charset utf-8;
             content_by_lua_file return_cache_lock.lua;
        }

        #openresty将nginx分为了七个阶段
        location =/mixed{
            set_by_lua $a 'ngx.log(ngx.ERR,"set_by_lua")';
            rewrite_by_lua 'ngx.log(ngx.ERR,"rewrite_by_lua")';
            access_by_lua 'ngx.log(ngx.ERR,"access_by_lua")';
            content_by_lua 'ngx.log(ngx.ERR,"content_by_lua")';
            header_filter_by_lua 'ngx.log(ngx.ERR,"header_filter_by_lua")';
            body_filter_by_lua 'ngx.log(ngx.ERR,"body_filter_by_lua")';
            log_by_lua 'ngx.log(ngx.ERR,"log_by_lua")';
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
