
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log /Users/xiaoyueya/work/logs/openresty/error.log  notice;
#error_log /Users/xiaoyueya/work/logs/openresty/error.log  info;

pid     logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #指定缓存信息
    lua_shared_dict ngx_cache 128m;
    #保证只有一个线程去访问redis或是mysql-lock for cache
    lua_shared_dict cache_lock 100k;
    #lua扩展加载
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";

    #初始化项目加载包和配置
    init_by_lua 'require("src.conf.loading_config")({"debug"});';
    init_worker_by_lua_file src/conf/starting_worker.lua;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        access_log  logs/access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

      #openresty将nginx分为了七个阶段
      location =/mixed{
        default_type 'text/html';
        charset utf-8;
        # 七个阶段分别是
        set_by_lua $a 'ngx.log(ngx.ERR,"set_by_lua")';
        rewrite_by_lua 'ngx.log(ngx.ERR,"rewrite_by_lua")';
        access_by_lua 'ngx.log(ngx.ERR,"access_by_lua")';
        content_by_lua 'ngx.log(ngx.ERR,"content_by_lua")';
        header_filter_by_lua 'ngx.log(ngx.ERR,"header_filter_by_lua")';
        body_filter_by_lua 'ngx.log(ngx.ERR,"body_filter_by_lua")';
        log_by_lua 'ngx.log(ngx.ERR,"log_by_lua")';
      }


      location /test/jwt{
        default_type 'text/html';
        charset utf-8;
        content_by_lua_file src/location/jwt_generate_location.lua;
      }

      location /test/redis{
        charset utf-8;
        default_type 'text/html';
        content_by_lua_file src/helper/redis_factory_test.lua;
      }


      location /test/http/bench{
        charset utf-8;
        default_type 'text/html';
        access_by_lua_file src/location/access_auth_location.lua;
        content_by_lua_file src/location/http_bench_location.lua;
      }

      location /test/module/cache{
        default_type 'text/html';
        charset utf-8;
        content_by_lua_file src/location/module_cache_location.lua;
      }

      location /test/shared/dict{
        default_type 'text/html';
        charset utf-8;
        content_by_lua_file src/location/shared_dict_location.lua;
      }

      location /test/real/ip{
        default_type 'text/html';
        charset utf-8;
        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        set $Real $http_x_forwarded_for;
        if ( $Real ~ (\d+)\.(\d+)\.(\d+)\.(\d+),(.*) ){
           set $Real $1.$2.$3.$4;
        }
        proxy_set_header X-Real-Ip $Real;
        content_by_lua '
            local headers = ngx.req.get_headers()
            for k, v in pairs(headers) do
                ngx.print(k .. ":" .. v);
            end
            local ip = headers["X-REAL-IP"] or headers["X_FORWARDED_FOR"] or ngx.var.remote_addr or "0.0.0.0";
          ngx.print(" - - - - - - - - - - - - -   ");
          ngx.print(ip);


        ';
      }

      #内部url
      location /internet_proxy {
        internal;
        charset utf-8;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        set_by_lua $query_url 'return ngx.unescape_uri(ngx.var.arg_url);';
        proxy_pass $query_url;
      }

      #外部访问
      location /v1/auth {
        default_type 'text/html';
        charset utf-8;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
          #权限校验阶段
        access_by_lua_file src/location/access_auth_location.lua;
          #代理子链接请求阶段
        content_by_lua_file src/location/auth_location.lua;
      }


      location /nginx/status {
        stub_status on;
        access_log on;
        auth_basic "NginxStatus";
        #auth_basic_user_file conf/htpasswd;
      }

    }
}
